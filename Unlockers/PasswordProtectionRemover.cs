using System;
using System.Linq;
using Mono.Cecil;
using Mono.Cecil.Cil;

namespace RustEditProCrack.Unlockers
{
    /// <summary>
    /// –ö–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º –≤ RustEdit Pro
    /// </summary>
    public class PasswordProtectionRemover
    {
        private readonly AssemblyDefinition assembly;

        public PasswordProtectionRemover(AssemblyDefinition assembly)
        {
            this.assembly = assembly;
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º
        /// </summary>
        public bool RemovePasswordProtection()
        {
            Console.WriteLine("üîß === –£–î–ê–õ–ï–ù–ò–ï PASSWORD PROTECTION ===");
            
            try
            {
                // –û–ë–ù–û–í–õ–ï–ù–û: –ò—â–µ–º –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞ BFJKBOOACKO –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ PLOFBHPMKFD
                var cryptoClass = assembly.MainModule.Types
                    .FirstOrDefault(t => t.Name == "BFJKBOOACKO");
                    
                if (cryptoClass == null)
                {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –µ—Å–ª–∏ –∏–º—è —Å–Ω–æ–≤–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    cryptoClass = FindCryptoClassBySignature();
                    
                    if (cryptoClass == null)
                    {
                        Console.WriteLine("‚ùå –ö–ª–∞—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
                        return false;
                    }
                }

                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å {cryptoClass.Name} —Å {cryptoClass.Methods.Count} –º–µ—Ç–æ–¥–∞–º–∏");

                // –ù–∞–π—Ç–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º)
                var encryptionMethods = cryptoClass.Methods
                    .Where(m => m.HasBody && m.ReturnType.FullName == "System.String" && 
                           m.Parameters.Count == 2 && 
                           m.Parameters[0].ParameterType.FullName == "System.String" && 
                           m.Parameters[1].ParameterType.FullName == "System.Int32")
                    .ToList();

                if (!encryptionMethods.Any())
                {
                    Console.WriteLine("‚ùå –ú–µ—Ç–æ–¥—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                    return false;
                }

                Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ {encryptionMethods.Count} –º–µ—Ç–æ–¥–æ–≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è");

                int patchedMethods = 0;

                // –ü–∞—Ç—á–∏–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
                foreach (var method in encryptionMethods)
                {
                    if (PatchEncryptionMethod(method))
                    {
                        patchedMethods++;
                        Console.WriteLine($"‚úÖ –ü—Ä–æ–ø–∞—Ç—á–µ–Ω –º–µ—Ç–æ–¥: {method.Name}");
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å –º–µ—Ç–æ–¥: {method.Name}");
                    }
                }

                Console.WriteLine($"\nüéâ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–æ {patchedMethods} –∏–∑ {encryptionMethods.Count} –º–µ—Ç–æ–¥–æ–≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è");
                return patchedMethods > 0;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è password protection: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∞—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º –º–µ—Ç–æ–¥–æ–≤
        /// </summary>
        private TypeDefinition FindCryptoClassBySignature()
        {
            Console.WriteLine("üîç –ò—â–µ–º –∫–ª–∞—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º...");
            
            foreach (var type in assembly.MainModule.Types)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∞—Å—Å–∞ –º–µ—Ç–æ–¥—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                var encryptionMethods = type.Methods
                    .Where(m => m.HasBody && m.ReturnType.FullName == "System.String" && 
                           m.Parameters.Count == 2 && 
                           m.Parameters[0].ParameterType.FullName == "System.String" && 
                           m.Parameters[1].ParameterType.FullName == "System.Int32")
                    .ToList();
                
                if (encryptionMethods.Count >= 3)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –º–µ—Ç–æ–¥–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                    foreach (var method in encryptionMethods)
                    {
                        bool containsCrypto = method.Body.Instructions
                            .Any(i => i.OpCode == OpCodes.Newobj && 
                                  i.Operand is MethodReference methodRef && 
                                  (methodRef.DeclaringType.Name.Contains("Aes") || 
                                   methodRef.DeclaringType.Name.Contains("Rfc2898DeriveBytes") ||
                                   methodRef.DeclaringType.Name.Contains("CryptoStream")));
                        
                        if (containsCrypto)
                        {
                            Console.WriteLine($"üîç –ù–∞–π–¥–µ–Ω –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–ª–∞—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {type.Name}");
                            return type;
                        }
                    }
                }
            }
            
            return null;
        }

        /// <summary>
        /// –ü–∞—Ç—á–∏—Ç –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–ª –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        private bool PatchEncryptionMethod(MethodDefinition method)
        {
            Console.WriteLine($"üîß –ü–∞—Ç—á–∏–Ω–≥ –º–µ—Ç–æ–¥–∞ {method.Name}...");
            
            try
            {
                var ilProcessor = method.Body.GetILProcessor();
                
                // –û—á–∏—â–∞–µ–º —Ç–µ–ª–æ –º–µ—Ç–æ–¥–∞
                method.Body.Instructions.Clear();
                method.Body.ExceptionHandlers.Clear();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É (–ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
                ilProcessor.Append(Instruction.Create(OpCodes.Ldarg_0)); // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (—Å—Ç—Ä–æ–∫–∞) –Ω–∞ —Å—Ç–µ–∫
                ilProcessor.Append(Instruction.Create(OpCodes.Ret));     // –í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ —Å—Ç–µ–∫–∞
                
                Console.WriteLine($"‚úÖ –ú–µ—Ç–æ–¥ {method.Name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∏–Ω–≥–∞ –º–µ—Ç–æ–¥–∞ {method.Name}: {ex.Message}");
                return false;
            }
        }
    }
} 